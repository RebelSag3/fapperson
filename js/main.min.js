function getCookie(e) {
  var o = e + "=";
  for (var t = document.cookie.split(";"), s = 0; s < t.length; s++) {
    var a = t[s].trim();
    if (a.indexOf(o) == 0) {
      return a.substring(o.length, a.length);
    }
  }
  return "";
}
function setCookie(e, o, t) {
  var s = new Date();
  s.setTime(s.getTime() + t * 24 * 60 * 60 * 1000);
  var a = "expires=" + s.toGMTString();
  document.cookie = e + "=" + o + "; " + a;
}
function showSplash() {
  currentstate = states.SplashScreen;
  velocity = 0;
  position = 180;
  rotation = 0;
  score = 0;
  $("#player").css({
    y: 0,
    x: 0
  });
  updatePlayer($("#player"));
  soundSwoosh.stop();
  soundSwoosh.play();
  $(".pipe").remove();
  pipes = new Array();
  $(".animated").css("animation-play-state", "running");
  $(".animated").css("-webkit-animation-play-state", "running");
  $("#splash").transition({
    opacity: 1
  }, 2000, "ease");
}
function startGame() {
  currentstate = states.GameScreen;
  soundHit.play();
  soundHit.stop();
  $("#splash").stop();
  $("#splash").transition({
    opacity: 0
  }, 500, "ease");
  setBigScore();
  if (debugmode) {
    $(".boundingbox").show();
  }
  var e = 1000 / 60;
  loopGameloop = setInterval(gameloop, e);
  loopPipeloop = setInterval(updatePipes, 1400);
  playerJump();
  soundNasheed.stop();
  soundNasheed.play();
}
function updatePlayer(e) {
  rotation = Math.min(velocity / 10 * 40, 40);
  $(e).css({
    rotate: rotation,
    top: position
  });
}
function gameloop() {
  var e = $("#player");
  velocity += gravity;
  position += velocity;
  updatePlayer(e);
  var o = document.getElementById("player").getBoundingClientRect();
  var t = 34;
  var s = 24;
  var a = t - Math.sin(Math.abs(rotation) / 90) * 8;
  var i = (s + o.height) / 2;
  var n = (o.width - a) / 2 + o.left;
  var r = (o.height - i) / 2 + o.top;
  var p = n + a;
  var c = r + i;
  if (debugmode) {
    var l = $("#playerbox");
    l.css("left", n);
    l.css("top", r);
    l.css("height", i);
    l.css("width", a);
  }
  if (o.bottom >= $("#land").offset().top) {
    playerDead();
    return;
  }
  var u = $("#ceiling");
  if (r <= u.offset().top + u.height()) {
    position = 0;
  }
  if (pipes[0] != null) {
    var d = pipes[0];
    var h = d.children(".pipe_upper");
    var m = h.offset().top + h.height();
    var y = h.offset().left - 2;
    var g = y + pipewidth;
    var f = m + pipeheight;
    if (debugmode) {
      var l = $("#pipebox");
      l.css("left", y);
      l.css("top", m);
      l.css("height", pipeheight);
      l.css("width", pipewidth);
    }
    if (p > y && (!(r > m) || !(f > c))) {
      playerDead();
      return;
    } else {
      if (n > g) {
        pipes.splice(0, 1);
        playerScore();
      }
      return;
    }
  }
}
function screenClick() {
  if (currentstate == states.GameScreen) {
    playerJump();
  } else if (currentstate == states.SplashScreen) {
    startGame();
  }
}
function playerJump() {
  velocity = jump;
  soundJump.stop();
  soundJump.play();
}
function setBigScore(e) {
  var o = $("#bigscore");
  o.empty();
  if (!e) {
    for (var t = score.toString().split(""), s = 0; s < t.length; s++) {
      o.append("<img src='assets/font_big_" + t[s] + ".png' alt='" + t[s] + "'>");
    }
  }
}
function setSmallScore() {
  var e = $("#currentscore");
  e.empty();
  for (var o = score.toString().split(""), t = 0; t < o.length; t++) {
    e.append("<img src='assets/font_small_" + o[t] + ".png' alt='" + o[t] + "'>");
  }
}
function setHighScore() {
  var e = $("#highscore");
  e.empty();
  for (var o = highscore.toString().split(""), t = 0; t < o.length; t++) {
    e.append("<img src='assets/font_small_" + o[t] + ".png' alt='" + o[t] + "'>");
  }
}
function setMedal() {
  var e = $("#medal");
  e.empty();
  if (score < 10) {
    return false;
  } else {
    if (score >= 10) {
      medal = "bronze";
    }
    if (score >= 20) {
      medal = "silver";
    }
    if (score >= 30) {
      medal = "gold";
    }
    if (score >= 40) {
      medal = "platinum";
    }
    e.append("<img src=\"assets/medal_" + medal + ".png\" alt=\"" + medal + "\">");
    return true;
  }
}
function playerDead() {
  $(".animated").css("animation-play-state", "paused");
  $(".animated").css("-webkit-animation-play-state", "paused");
  var e = $("<div id=\"explosion\" style=\"top: " + $("#player").position().top + "px; left:60px;\"></div>");
  $("#flyarea").append(e);
  var o = $("#player").position().top + $("#player").width();
  var t = $("#flyarea").height();
  var s = Math.max(0, t - o);
  $("#player").transition({
    y: s + "px",
    rotate: 90
  }, 1000, "easeInOutCubic");
  currentstate = states.ScoreScreen;
  clearInterval(loopGameloop);
  clearInterval(loopPipeloop);
  loopGameloop = null;
  loopPipeloop = null;
  if (isIncompatible.any()) {
    soundHit.play();
    showScore();
  } else {
    soundHit.play().bindOnce("ended", function () {
      soundDie.play().bindOnce("ended", function () {
        showScore();
      });
    });
  }
}
function showScore() {
  soundNasheed.stop();
  $("#scoreboard").css("display", "block");
  setBigScore(true);
  if (score > highscore) {
    highscore = score;
    setCookie("highscore", highscore, 999);
  }
  setSmallScore();
  setHighScore();
  var e = setMedal();
  soundSwoosh.stop();
  soundSwoosh.play();
  $("#scoreboard").css({
    y: "40px",
    opacity: 0
  });
  $("#replay").css({
    y: "40px",
    opacity: 0
  });
  $("#scoreboard").transition({
    y: "0px",
    opacity: 1
  }, 600, "ease", function () {
    soundSwoosh.stop();
    soundSwoosh.play();
    $("#replay").transition({
      y: "0px",
      opacity: 1
    }, 600, "ease");
    if (e) {
      $("#medal").css({
        scale: 2,
        opacity: 0
      });
      $("#medal").transition({
        opacity: 1,
        scale: 1
      }, 1200, "ease");
    }
  });
  replayclickable = true;
}
function playerScore() {
  score += 1;
  soundScore.stop();
  soundScore.play();
  setBigScore();
}
function updatePipes() {
  $(".pipe").filter(function () {
    return $(this).position().left <= -100;
  }).remove();
  var e = 80;
  var o = 420 - pipeheight - e * 2;
  var t = Math.floor(Math.random() * o + e);
  var s = 420 - pipeheight - t;
  var a = $("<div class=\"pipe animated\"><div class=\"pipe_upper\" style=\"height: " + t + "px;\"></div><div class=\"pipe_lower\" style=\"height: " + s + "px;\"></div></div>");
  $("#flyarea").append(a);
  pipes.push(a);
}
var debugmode = false;
var states = Object.freeze({
  SplashScreen: 0,
  GameScreen: 1,sound
  ScoreScreen: 2
});
var currentstate;
var gravity = 0.25;
var velocity = 0;
var position = 180;
var rotation = 0;
var jump = -4.6;
var score = 0;
var highscore = 0;
var pipeheight = 100;
var pipewidth = 52;
var pipes = new Array();
var replayclickable = false;
buzz.defaults.preload = true;
buzz.defaults.formats = ["ogg", "mp3"];
var volume = 30;
var soundJump = new buzz.sound("assets/sounds/sfx_wing");
var soundScore = new buzz.sound("assets/sounds/sfx_point");
var soundDie = new buzz.sound("assets/sounds/sfx_die");
var soundSwoosh = new buzz.sound("assets/sounds/sfx_swooshing");
var soundNasheed = new buzz.sound("assets/sounds/nasheed");
var soundHit = new buzz.sound("assets/sounds/sfx_hit");
buzz.all().setVolume(volume);
soundNasheed.setVolume(15);
var loopGameloop;
var loopPipeloop;
$(document).ready(function () {
  if (window.location.search == "?debug") {
    debugmode = true;
  }
  if (window.location.search == "?easy") {
    pipeheight = 200;
  }
  var e = getCookie("highscore");
  if (e != "") {
    highscore = parseInt(e);
  }
  showSplash();
});
$(document).keydown(function (e) {
  if (e.keyCode == 32) {
    if (currentstate == states.ScoreScreen) {
      $("#replay").click();
    } else {
      screenClick();
    }
  }
});
if ("ontouchstart" in window) {
  $(document).on("touchstart", screenClick);
} else {
  $(document).on("mousedown", screenClick);
}
$("#replay").click(function () {
  $("#explosion").remove();
  if (replayclickable) {
    replayclickable = false;
    soundSwoosh.stop();
    soundSwoosh.play();
    $("#scoreboard").transition({
      y: "-40px",
      opacity: 0
    }, 1000, "ease", function () {
      $("#scoreboard").css("display", "none");
      showSplash();
    });
  }
});
var isIncompatible = {
  Android: function () {
    return navigator.userAgent.match(/Android/i);
  },
  BlackBerry: function () {
    return navigator.userAgent.match(/BlackBerry/i);
  },
  iOS: function () {
    return navigator.userAgent.match(/iPhone|iPad|iPod/i);
  },
  Opera: function () {
    return navigator.userAgent.match(/Opera Mini/i);
  },
  Safari: function () {
    return navigator.userAgent.match(/OS X.*Safari/) && !navigator.userAgent.match(/Chrome/);
  },
  Windows: function () {
    return navigator.userAgent.match(/IEMobile/i);
  },
  any: function () {
    return isIncompatible.Android() || isIncompatible.BlackBerry() || isIncompatible.iOS() || isIncompatible.Opera() || isIncompatible.Safari() || isIncompatible.Windows();
  }
};